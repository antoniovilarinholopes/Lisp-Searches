(in-package :user)
(load (compile-file "procura.lisp"))
(load (compile-file "job-shop-problemas-modelos.lisp"))

(defun calendarizacao () )

;;;(defun ilds (problema) 
;;;  (let ((objectivo? (problema-objectivo? problema))
;;;        (estado= (problema-estado= problema))
;;;    
;;;        (labels ((esta-no-caminho? (estado caminho)
;;;                                   (member estado caminho :test estado=))
;;;                 (blah ()
;;;                       (let* ((successors ())
;;;                              (number-elem (length(sucessors)))
;;;                              ())
;;;                         (sampling nth successors (random blah))
;;;                         )
;;;             ) 
;;;      )
;;;    )
;;;  )

(defun sondagem-iterativa (problema) 
  (let* ((*nos-gerados* 0)
	  	(*nos-expandidos* 0)
	  	(tempo-inicio (get-internal-run-time))
  		(objectivo? (problema-objectivo? problema))
        (estado= (problema-estado= problema))
        (solucao nil))
    
        (labels ((esta-no-caminho? (estado caminho)
                                   (member estado caminho :test estado=))
                 (lanca-sonda (estado)
                              (cond ((funcall objectivo? estado) (list estado))
                                    ((null estado) nil)
                                    (t 
                                     (let* ((sucessores (problema-gera-sucessores problema estado))
                                            (num-elem (length sucessores)))
                                       (lanca-sonda (nth (random num-elem) sucessores))
                                       )
                                     )
                                    ) 
                              )
                 )
                 (while(null solucao) 
                   (setf solucao (lanca-sonda (problema-estado-inicial problema)))
                   )
                 (return-from sondagem-iterativa (list solucao))
          
          )
    )
;;;    (while(null solucao)
;;;      (setf solucao (lanca-sonda problema))
;;;      )
;;;    (return-from sondagem-iterativa (list solucao))
;;;    )
  )

